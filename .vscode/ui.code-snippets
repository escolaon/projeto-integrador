{
  // Place your ui-thing workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create props": {
    "scope": "typescript",
    "prefix": "props",
    "body": ["const ${1:props} = defineProps<{", "\t$0", "}>()"],
    "description": "Create a props block in setup block",
  },
  "Create props with defaults": {
    "scope": "typescript",
    "prefix": "props",
    "body": [
      "const ${1:propsWithDefaults} = withDefaults(defineProps<{",
      "\t$0",
      "}>(), {",
      "",
      "});",
    ],
  },
  "Create emit": {
    "scope": "typescript",
    "prefix": "emits",
    "body": ["const ${1:emits} = defineEmits<{", "\t$0", "}>();"],
  },
  "Create tailwind-variant styles": {
    "scope": "typescript",
    "prefix": "styles",
    "body": ["const styles = tv({", "\tbase: \"$0\"", "})"],
  },
  "Create binded class": {
    "scope": "html, vue",
    "prefix": "class",
    "body": [":class=\"styles({ class: props.class })\""],
  },
  //Component snippets
  "Accordion": {
    "scope": "html,vue",
    "prefix": ["accordion", "uiaccordion"],
    "body": ["<UiAccordion :items=\"${1:accordionItems}\">", "\t$0", "</UiAccordion>"],
    "description": "Generates parent Accordion component",
  },
  "AccordionContent": {
    "scope": "html,vue",
    "prefix": ["accordioncontent", "uiaccordioncontent"],
    "body": ["<UiAccordionContent content=\"$1\">$0</UiAccordionContent>"],
    "description": "Generates AccordionContent component",
  },
  "AccordionHeader": {
    "scope": "html,vue",
    "prefix": ["accordionheader", "uiaccordionheader"],
    "body": ["<UiAccordionHeader>$0</UiAccordionHeader>"],
    "description": "Generates AccordionHeader component",
  },
  "AccordionItem": {
    "scope": "html,vue",
    "prefix": ["accordionitem", "uiaccordionitem"],
    "body": ["<UiAccordionItem value=\"$1\">$0</UiAccordionItem>"],
    "description": "Generates AccordionItem component",
  },
  "AccordionTrigger": {
    "scope": "html,vue",
    "prefix": ["accordiontrigger", "uiaccordiontrigger"],
    "body": ["<UiAccordionTrigger>$0</UiAccordionTrigger>"],
    "description": "Generates AccordionTrigger component",
  },
  "Alert": {
    "scope": "html,vue",
    "prefix": ["alert", "uialert"],
    "body": ["<UiAlert title=\"$1\" description=\"$2\" icon=\"$3\">$0</UiAlert>"],
    "description": "Generates Alert parent component",
  },
  "AlertTitle": {
    "scope": "html,vue",
    "prefix": ["alerttitle", "uialerttitle"],
    "body": ["<UiAlertTitle title=\"$1\">$0</UiAlertTitle>"],
    "Title": "Generates AlertTitle component",
  },
  "AlertDescription": {
    "scope": "html,vue",
    "prefix": ["alertdescription", "uialertdescription"],
    "body": ["<UiAlertDescription description=\"$1\">$0</UiAlertDescription>"],
    "description": "Generates AlertDescription component",
  },
}
